name: CI

on:
  push:
    branches:
      - master
      - main # TODO: change default branch to master and remove this line
      - release-*
  pull_request: {}
  workflow_dispatch: {}

env:
  # Common versions
  GO_VERSION: '1.20'
  GOLANGCI_VERSION: 'v1.52.2'
  DOCKER_BUILDX_VERSION: 'v0.8.2'

  # Common users. We can't run a step 'if secrets.AWS_USR != ""' but we can run
  # a step 'if env.AWS_USR' != ""', so we copy these to succinctly test whether
  # credentials have been provided before trying to run steps that need them.
  CONTRIB_DOCKER_USR: ${{ secrets.CONTRIB_DOCKER_USR }}
  XPKG_ACCESS_ID: ${{ secrets.XPKG_ACCESS_ID }}
  AWS_USR: ${{ secrets.AWS_USR }}

jobs:
  detect-noop:
    runs-on: ubuntu-20.04
    outputs:
      noop: ${{ steps.noop.outputs.should_skip }}
    steps:
      - name: Detect No-op Changes
        id: noop
        uses: fkirc/skip-duplicate-actions@v2.0.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          paths_ignore: '["**.md", "**.png", "**.jpg"]'
          do_not_skip: '["workflow_dispatch", "schedule", "push"]'


  lint:
    runs-on: ubuntu-20.04
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Find the Go Build Cache
        id: go
        run: echo "::set-output name=cache::$(make go.cachedir)"

      - name: Cache the Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go.outputs.cache }}
          key: ${{ runner.os }}-build-lint-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-build-lint-

      - name: Cache Go Dependencies
        uses: actions/cache@v2
        with:
          path: .work/pkg
          key: ${{ runner.os }}-pkg-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-pkg-

      - name: Vendor Dependencies
        run: make vendor vendor.check

      # We could run 'make lint' but we prefer this action because it leaves
      # 'annotations' (i.e. it comments on PRs to point out linter violations).
      - name: Lint
        uses: golangci/golangci-lint-action@v3
        with:
          args: --timeout=30m
          version: ${{ env.GOLANGCI_VERSION }}

  check-diff:
    runs-on: ubuntu-20.04
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Find the Go Build Cache
        id: go
        run: echo "::set-output name=cache::$(make go.cachedir)"

      - name: Cache the Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go.outputs.cache }}
          key: ${{ runner.os }}-build-check-diff-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-build-check-diff-

      - name: Cache Go Dependencies
        uses: actions/cache@v2
        with:
          path: .work/pkg
          key: ${{ runner.os }}-pkg-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-pkg-
      - name: Vendor Dependencies
        run: make vendor vendor.check
      - name: make generate
        run: |
          make generate > /dev/null || true
      - name: debug
        run: |
          tree .work || true
          cat .work/confluentinc/confluent/docs/resources/confluent_ksql_cluster.md

      - name: pre-process-docs
        run: |
          cat .work/confluentinc/confluent/docs/resources/confluent_ksql_cluster.md
          file_contents=$(cat .work/confluentinc/confluent/docs/resources/confluent_ksql_cluster.md)
          echo $file_contents | grep "page_title"
          page_title_exists=$?
          if [[ $page_title_exists -neq "0" ]]; then
          	echo '---
            # generated by https://github.com/hashicorp/terraform-plugin-docs
            page_title: "confluent_ksql_cluster Resource - terraform-provider-confluent"
            subcategory: ""
            description: |-
            ---' | cat - .work/confluentinc/confluent/docs/resources/confluent_ksql_cluster.md > temp && mv temp .work/confluentinc/confluent/docs/resources/confluent_ksql_cluster.md
          endif

      - name: Check Diff
        run: make check-diff

  unit-tests:
    runs-on: ubuntu-20.04
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Fetch History
        run: git fetch --prune --unshallow

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Find the Go Build Cache
        id: go
        run: echo "::set-output name=cache::$(make go.cachedir)"

      - name: Cache the Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go.outputs.cache }}
          key: ${{ runner.os }}-build-unit-tests-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-build-unit-tests-

      - name: Cache Go Dependencies
        uses: actions/cache@v2
        with:
          path: .work/pkg
          key: ${{ runner.os }}-pkg-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-pkg-

      - name: Vendor Dependencies
        run: make vendor vendor.check

      - name: Run Unit Tests
        run: make -j2 test

      - name: Publish Unit Test Coverage
        uses: codecov/codecov-action@v1
        with:
          flags: unittests
          file: _output/tests/linux_amd64/coverage.txt

  e2e-tests:
    runs-on: ubuntu-20.04
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'

    steps:
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: ${{ env.DOCKER_BUILDX_VERSION }}
          install: true

      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Fetch History
        run: git fetch --prune --unshallow

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Find the Go Build Cache
        id: go
        run: echo "::set-output name=cache::$(make go.cachedir)"

      - name: Cache the Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go.outputs.cache }}
          key: ${{ runner.os }}-build-e2e-tests-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-build-e2e-tests-

      - name: Cache Go Dependencies
        uses: actions/cache@v2
        with:
          path: .work/pkg
          key: ${{ runner.os }}-pkg-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-pkg-

      - name: Vendor Dependencies
        run: make vendor vendor.check

      - name: Build Helm Chart
        run: make -j2 build
        env:
          # We're using docker buildx, which doesn't actually load the images it
          # builds by default. Specifying --load does so.
          BUILD_ARGS: "--load"

      - name: Run E2E Tests
        run: make e2e USE_HELM3=true

  publish-artifacts:
    runs-on: ubuntu-20.04
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'

    steps:
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: ${{ env.DOCKER_BUILDX_VERSION }}
          install: true

      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Fetch History
        run: git fetch --prune --unshallow

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Find the Go Build Cache
        id: go
        run: echo "::set-output name=cache::$(make go.cachedir)"

      - name: Cache the Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go.outputs.cache }}
          key: ${{ runner.os }}-build-publish-artifacts-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-build-publish-artifacts-

      - name: Cache Go Dependencies
        uses: actions/cache@v2
        with:
          path: .work/pkg
          key: ${{ runner.os }}-pkg-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-pkg-

      - name: Vendor Dependencies
        run: make vendor vendor.check

      - name: Build Artifacts
        run: make -j2 build.all
        env:
          # We're using docker buildx, which doesn't actually load the images it
          # builds by default. Specifying --load does so.
          BUILD_ARGS: "--load"

      - name: Publish Artifacts to GitHub
        uses: actions/upload-artifact@v2
        with:
          name: output
          path: _output/**

      - name: Login to Docker
        uses: docker/login-action@v1
        if: env.CONTRIB_DOCKER_USR != ''
        with:
          username: ${{ secrets.CONTRIB_DOCKER_USR }}
          password: ${{ secrets.CONTRIB_DOCKER_PSW }}

      - name: Login to Upbound
        uses: docker/login-action@v1
        if: env.XPKG_ACCESS_ID != ''
        with:
          registry: xpkg.upbound.io
          username: ${{ secrets.XPKG_ACCESS_ID }}
          password: ${{ secrets.XPKG_TOKEN }}

      - name: Publish Artifacts to S3 and Docker Hub
        run: make -j2 publish BRANCH_NAME=${GITHUB_REF##*/}
        if: env.AWS_USR != '' && env.CONTRIB_DOCKER_USR != ''
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_USR }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_PSW }}
          GIT_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Promote Artifacts in S3 and Docker Hub
        if: github.ref == 'refs/heads/master' && env.AWS_USR != '' && env.CONTRIB_DOCKER_USR != ''
        run: make -j2 promote
        env:
          BRANCH_NAME: master
          CHANNEL: master
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_USR }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_PSW }}

