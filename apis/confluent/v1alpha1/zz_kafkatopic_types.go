// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type KafkaTopicCredentialsInitParameters struct {
}

type KafkaTopicCredentialsObservation struct {
}

type KafkaTopicCredentialsParameters struct {

	// The Kafka API Key.
	// The Cluster API Key for your Confluent Cloud cluster.
	// +kubebuilder:validation:Required
	KeySecretRef v1.SecretKeySelector `json:"keySecretRef" tf:"-"`

	// The Kafka API Secret.
	// The Cluster API Secret for your Confluent Cloud cluster.
	// +kubebuilder:validation:Required
	SecretSecretRef v1.SecretKeySelector `json:"secretSecretRef" tf:"-"`
}

type KafkaTopicInitParameters struct {

	// The custom topic settings to set:
	// The custom topic settings to set (e.g., `"cleanup.policy" = "compact"`).
	Config map[string]*string `json:"config,omitempty" tf:"config,omitempty"`

	// supports the following:
	// The Cluster API Credentials.
	Credentials []KafkaTopicCredentialsInitParameters `json:"credentials,omitempty" tf:"credentials,omitempty"`

	// supports the following:
	KafkaCluster []KafkaTopicKafkaClusterInitParameters `json:"kafkaCluster,omitempty" tf:"kafka_cluster,omitempty"`

	// The number of partitions to create in the topic. Defaults to 6.
	// The number of partitions to create in the topic. Defaults to `6`.
	PartitionsCount *float64 `json:"partitionsCount,omitempty" tf:"partitions_count,omitempty"`

	// The REST endpoint of the Kafka cluster, for example, https://pkc-00000.us-central1.gcp.confluent.cloud:443).
	// The REST endpoint of the Kafka cluster (e.g., `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint *string `json:"restEndpoint,omitempty" tf:"rest_endpoint,omitempty"`

	// The name of the topic, for example, orders-1. The topic name can be up to 249 characters in length, and can include the following characters: a-z, A-Z, 0-9, . (dot), _ (underscore), and - (dash). As a best practice, we recommend against using any personally identifiable information (PII) when naming your topic.
	// The name of the topic, for example, `orders-1`.
	TopicName *string `json:"topicName,omitempty" tf:"topic_name,omitempty"`
}

type KafkaTopicKafkaClusterInitParameters struct {
}

type KafkaTopicKafkaClusterObservation struct {

	// The ID of the Kafka cluster, for example, lkc-abc123.
	// The Kafka cluster ID (e.g., `lkc-12345`).
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type KafkaTopicKafkaClusterParameters struct {

	// The ID of the Kafka cluster, for example, lkc-abc123.
	// The Kafka cluster ID (e.g., `lkc-12345`).
	// +crossplane:generate:reference:type=Cluster
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Reference to a Cluster to populate id.
	// +kubebuilder:validation:Optional
	IDRef *v1.Reference `json:"idRef,omitempty" tf:"-"`

	// Selector for a Cluster to populate id.
	// +kubebuilder:validation:Optional
	IDSelector *v1.Selector `json:"idSelector,omitempty" tf:"-"`
}

type KafkaTopicObservation struct {

	// The custom topic settings to set:
	// The custom topic settings to set (e.g., `"cleanup.policy" = "compact"`).
	Config map[string]*string `json:"config,omitempty" tf:"config,omitempty"`

	// supports the following:
	// The Cluster API Credentials.
	Credentials []KafkaTopicCredentialsParameters `json:"credentials,omitempty" tf:"credentials,omitempty"`

	// The ID of the Kafka cluster, for example, lkc-abc123.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// supports the following:
	KafkaCluster []KafkaTopicKafkaClusterObservation `json:"kafkaCluster,omitempty" tf:"kafka_cluster,omitempty"`

	// The number of partitions to create in the topic. Defaults to 6.
	// The number of partitions to create in the topic. Defaults to `6`.
	PartitionsCount *float64 `json:"partitionsCount,omitempty" tf:"partitions_count,omitempty"`

	// The REST endpoint of the Kafka cluster, for example, https://pkc-00000.us-central1.gcp.confluent.cloud:443).
	// The REST endpoint of the Kafka cluster (e.g., `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
	RestEndpoint *string `json:"restEndpoint,omitempty" tf:"rest_endpoint,omitempty"`

	// The name of the topic, for example, orders-1. The topic name can be up to 249 characters in length, and can include the following characters: a-z, A-Z, 0-9, . (dot), _ (underscore), and - (dash). As a best practice, we recommend against using any personally identifiable information (PII) when naming your topic.
	// The name of the topic, for example, `orders-1`.
	TopicName *string `json:"topicName,omitempty" tf:"topic_name,omitempty"`
}

type KafkaTopicParameters struct {

	// The custom topic settings to set:
	// The custom topic settings to set (e.g., `"cleanup.policy" = "compact"`).
	// +kubebuilder:validation:Optional
	Config map[string]*string `json:"config,omitempty" tf:"config,omitempty"`

	// supports the following:
	// The Cluster API Credentials.
	// +kubebuilder:validation:Optional
	Credentials []KafkaTopicCredentialsParameters `json:"credentials,omitempty" tf:"credentials,omitempty"`

	// supports the following:
	// +kubebuilder:validation:Optional
	KafkaCluster []KafkaTopicKafkaClusterParameters `json:"kafkaCluster,omitempty" tf:"kafka_cluster,omitempty"`

	// The number of partitions to create in the topic. Defaults to 6.
	// The number of partitions to create in the topic. Defaults to `6`.
	// +kubebuilder:validation:Optional
	PartitionsCount *float64 `json:"partitionsCount,omitempty" tf:"partitions_count,omitempty"`

	// The REST endpoint of the Kafka cluster, for example, https://pkc-00000.us-central1.gcp.confluent.cloud:443).
	// The REST endpoint of the Kafka cluster (e.g., `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
	// +kubebuilder:validation:Optional
	RestEndpoint *string `json:"restEndpoint,omitempty" tf:"rest_endpoint,omitempty"`

	// The name of the topic, for example, orders-1. The topic name can be up to 249 characters in length, and can include the following characters: a-z, A-Z, 0-9, . (dot), _ (underscore), and - (dash). As a best practice, we recommend against using any personally identifiable information (PII) when naming your topic.
	// The name of the topic, for example, `orders-1`.
	// +kubebuilder:validation:Optional
	TopicName *string `json:"topicName,omitempty" tf:"topic_name,omitempty"`
}

// KafkaTopicSpec defines the desired state of KafkaTopic
type KafkaTopicSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     KafkaTopicParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider KafkaTopicInitParameters `json:"initProvider,omitempty"`
}

// KafkaTopicStatus defines the observed state of KafkaTopic.
type KafkaTopicStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        KafkaTopicObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// KafkaTopic is the Schema for the KafkaTopics API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,confluent}
type KafkaTopic struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.topicName) || (has(self.initProvider) && has(self.initProvider.topicName))",message="spec.forProvider.topicName is a required parameter"
	Spec   KafkaTopicSpec   `json:"spec"`
	Status KafkaTopicStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KafkaTopicList contains a list of KafkaTopics
type KafkaTopicList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KafkaTopic `json:"items"`
}

// Repository type metadata.
var (
	KafkaTopic_Kind             = "KafkaTopic"
	KafkaTopic_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: KafkaTopic_Kind}.String()
	KafkaTopic_KindAPIVersion   = KafkaTopic_Kind + "." + CRDGroupVersion.String()
	KafkaTopic_GroupVersionKind = CRDGroupVersion.WithKind(KafkaTopic_Kind)
)

func init() {
	SchemeBuilder.Register(&KafkaTopic{}, &KafkaTopicList{})
}
