/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BindingObservation struct {

	// A CRN that specifies the scope and resource patterns necessary for the role to bind.
	CrnPattern *string `json:"crnPattern,omitempty" tf:"crn_pattern,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The principal User to bind the role to.
	Principal *string `json:"principal,omitempty" tf:"principal,omitempty"`

	// The name of the role to bind to the principal.
	RoleName *string `json:"roleName,omitempty" tf:"role_name,omitempty"`
}

type BindingParameters struct {

	// A CRN that specifies the scope and resource patterns necessary for the role to bind.
	// +kubebuilder:validation:Optional
	CrnPattern *string `json:"crnPattern,omitempty" tf:"crn_pattern,omitempty"`

	// The principal User to bind the role to.
	// +kubebuilder:validation:Optional
	Principal *string `json:"principal,omitempty" tf:"principal,omitempty"`

	// The name of the role to bind to the principal.
	// +kubebuilder:validation:Optional
	RoleName *string `json:"roleName,omitempty" tf:"role_name,omitempty"`
}

// BindingSpec defines the desired state of Binding
type BindingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BindingParameters `json:"forProvider"`
}

// BindingStatus defines the observed state of Binding.
type BindingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BindingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Binding is the Schema for the Bindings API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,confluent}
type Binding struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.crnPattern)",message="crnPattern is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.principal)",message="principal is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.roleName)",message="roleName is a required parameter"
	Spec   BindingSpec   `json:"spec"`
	Status BindingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BindingList contains a list of Bindings
type BindingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Binding `json:"items"`
}

// Repository type metadata.
var (
	Binding_Kind             = "Binding"
	Binding_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Binding_Kind}.String()
	Binding_KindAPIVersion   = Binding_Kind + "." + CRDGroupVersion.String()
	Binding_GroupVersionKind = CRDGroupVersion.WithKind(Binding_Kind)
)

func init() {
	SchemeBuilder.Register(&Binding{}, &BindingList{})
}
